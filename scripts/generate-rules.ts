import { writeFileSync } from "node:fs";
import path from "node:path";
import { getLatestVersionFromClonedRepo } from "./oxlint-version.js";
import { readFile } from "node:fs/promises";
import { TARGET_DIRECTORY, VERSION_PREFIX } from "./constants.js";

const __dirname = new URL(".", import.meta.url).pathname;

const oxlintVersion = await getLatestVersionFromClonedRepo(
  TARGET_DIRECTORY,
  VERSION_PREFIX,
);

console.log(`Generating rules for ${oxlintVersion}`);

const oxlintRulesFile = path.join(
  __dirname,
  "..",
  ".oxc_sparse",
  "crates",
  "oxc_linter",
  "src",
  "rules.rs",
);

const RulesRe = /oxc_macros::declare_all_lint_rules.*{([^*]*),\s*}/gm;
const rulesMap = new Map<string, Array<string>>();
const ignoreScope = new Set(["oxc", "deepscan"]);

const scopeMaps = {
  eslint: "",
  typescript: "@typescript-eslint",
};

async function generateRules(isCjs = false) {
  await readFile(oxlintRulesFile, { encoding: "utf8" }).then((content) => {
    const rules = RulesRe.exec(content || "")?.[1];
    if (rules) {
      for (const rule of rules.trim().split(",")) {
        const [scope, name] = rule.trim().split("::");
        rulesMap.has(scope)
          ? rulesMap.get(scope)?.push(name)
          : rulesMap.set(scope, [name]);
      }
    }
  });

  const exportScopes: string[] = [];
  let code =
    "// These rules are automatically generated by scripts/generate-rules.ts\n\n";

  for (const scope of rulesMap.keys()) {
    if (ignoreScope.has(scope)) {
      continue;
    }
    exportScopes.push(scope);
    const rules = rulesMap.get(scope);
    code += `const ${scope.replaceAll(/_(\w)/g, (_, c) =>
      c.toUpperCase(),
    )}Rules = {\n`;
    const ruleScope = Reflect.has(scopeMaps, scope)
      ? scopeMaps[scope as "eslint"]
      : scope.replace("_", "-");
    code += rules
      ?.map((rule) => {
        return `  "${ruleScope ? `${ruleScope}/` : ""}${rule.replaceAll(
          "_",
          "-",
        )}": "off"`;
      })
      .join(",\n");
    code += "\n}\n\n";
  }

  code += isCjs ? "module.exports = {\n" : "export {\n";
  code += exportScopes
    .map((scope) => {
      return `  ${scope.replaceAll(/_(\w)/g, (_, c) => c.toUpperCase())}Rules`;
    })
    .join(",\n");
  code += "\n}";

  writeFileSync(
    path.resolve(__dirname, `../rules.${isCjs ? "cjs" : "js"}`),
    code,
  );
}

await generateRules();
await generateRules(true);
